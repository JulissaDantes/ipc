// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.19;
library SelectorLibrary {
    function resolveSelectors(string memory facetName) public pure returns (bytes4[] memory facetSelectors) {
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("LinkedTokenReplicaFacet"))) {
            return abi.decode(hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000163517e82700000000000000000000000000000000000000000000000000000000dd62ed3e00000000000000000000000000000000000000000000000000000000095ea7b30000000000000000000000000000000000000000000000000000000070a0823100000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000a457c2d70000000000000000000000000000000000000000000000000000000088f0ed2f00000000000000000000000000000000000000000000000000000000e83a68880000000000000000000000000000000000000000000000000000000017b427180000000000000000000000000000000000000000000000000000000094382a5100000000000000000000000000000000000000000000000000000000e0b2119f00000000000000000000000000000000000000000000000000000000a9490a04000000000000000000000000000000000000000000000000000000003950935100000000000000000000000000000000000000000000000000000000c4d66de800000000000000000000000000000000000000000000000000000000f6ad4cdc0000000000000000000000000000000000000000000000000000000001c07c340000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000ef4827580000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000000000000000000000000000000000000023b872dd00000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("USDCTest"))) {
            return abi.decode(hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000ddd62ed3e00000000000000000000000000000000000000000000000000000000095ea7b30000000000000000000000000000000000000000000000000000000070a0823100000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000a0712d680000000000000000000000000000000000000000000000000000000006fdde03000000000000000000000000000000000000000000000000000000008da5cb5b00000000000000000000000000000000000000000000000000000000715018a60000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000000000000000000000000000000000000023b872dd00000000000000000000000000000000000000000000000000000000f2fde38b00000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("LinkedTokenControllerFacet"))) {
            return abi.decode(hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b3517e8270000000000000000000000000000000000000000000000000000000088f0ed2f00000000000000000000000000000000000000000000000000000000e83a68880000000000000000000000000000000000000000000000000000000017b427180000000000000000000000000000000000000000000000000000000094382a5100000000000000000000000000000000000000000000000000000000e0b2119f00000000000000000000000000000000000000000000000000000000a9490a0400000000000000000000000000000000000000000000000000000000c4d66de800000000000000000000000000000000000000000000000000000000f6ad4cdc0000000000000000000000000000000000000000000000000000000001c07c3400000000000000000000000000000000000000000000000000000000ef48275800000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("LinkedTokenFacet"))) {
            return abi.decode(hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b3517e8270000000000000000000000000000000000000000000000000000000088f0ed2f00000000000000000000000000000000000000000000000000000000e83a68880000000000000000000000000000000000000000000000000000000017b427180000000000000000000000000000000000000000000000000000000094382a5100000000000000000000000000000000000000000000000000000000e0b2119f00000000000000000000000000000000000000000000000000000000a9490a0400000000000000000000000000000000000000000000000000000000c4d66de800000000000000000000000000000000000000000000000000000000f6ad4cdc0000000000000000000000000000000000000000000000000000000001c07c3400000000000000000000000000000000000000000000000000000000ef48275800000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("LinkedTokenDiamond"))) {
            return abi.decode(hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("DiamondCutFacet"))) {
            return abi.decode(hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000011f931c1c00000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("DiamondLoupeFacet"))) {
            return abi.decode(hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005cdffacc60000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000adfca15e000000000000000000000000000000000000000000000000000000007a0ed6270000000000000000000000000000000000000000000000000000000001ffc9a700000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        if (keccak256(abi.encodePacked(facetName)) == keccak256(abi.encodePacked("OwnershipFacet"))) {
            return abi.decode(hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000028da5cb5b00000000000000000000000000000000000000000000000000000000f2fde38b00000000000000000000000000000000000000000000000000000000", (bytes4[]));
        }
        revert("Selector not found");
    }
}
